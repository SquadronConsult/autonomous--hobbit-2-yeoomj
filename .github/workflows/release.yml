name: Release and Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: '1'
  REGISTRY_URL: 'harbor.local'
  TRIVY_SEVERITY: 'HIGH,CRITICAL'
  BUILDKIT_PROGRESS: 'plain'
  DOCKER_SCAN_SUGGEST: 'false'
  BUILDKIT_CACHE_TTL: '168h'

jobs:
  # Verify backend and web builds are successful
  verify_builds:
    name: Verify Component Builds
    runs-on: ubuntu-latest
    steps:
      - name: Verify Backend Build
        uses: actions/github-script@v6
        with:
          script: |
            const backendWorkflow = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
              workflow_id: '.github/workflows/backend-ci.yml'
            });
            if (backendWorkflow.data.conclusion !== 'success') {
              core.setFailed('Backend build must pass before release');
            }

      - name: Verify Web Build
        uses: actions/github-script@v6
        with:
          script: |
            const webWorkflow = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
              workflow_id: '.github/workflows/web-ci.yml'
            });
            if (webWorkflow.data.conclusion !== 'success') {
              core.setFailed('Web build must pass before release');
            }

  # Build and scan container images
  build_containers:
    name: Build and Scan Containers
    needs: verify_builds
    runs-on: [self-hosted, arm64]
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Login to Harbor Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      # Build and scan DeepStream container
      - name: Build DeepStream Container
        uses: docker/build-push-action@v4
        with:
          context: ./infrastructure/docker/deepstream
          file: ./infrastructure/docker/deepstream/Dockerfile
          platforms: linux/arm64
          push: false
          tags: ${{ env.REGISTRY_URL }}/agricultural-system/deepstream:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan DeepStream Container
        uses: aquasecurity/trivy-action@0.10.0
        with:
          image: ${{ env.REGISTRY_URL }}/agricultural-system/deepstream:${{ github.ref_name }}
          severity: ${{ env.TRIVY_SEVERITY }}
          format: 'sarif'
          output: 'trivy-deepstream-results.sarif'

      # Build and scan ROS 2 container
      - name: Build ROS 2 Container
        uses: docker/build-push-action@v4
        with:
          context: ./infrastructure/docker/ros2
          file: ./infrastructure/docker/ros2/Dockerfile
          platforms: linux/arm64
          push: false
          tags: ${{ env.REGISTRY_URL }}/agricultural-system/ros2:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan ROS 2 Container
        uses: aquasecurity/trivy-action@0.10.0
        with:
          image: ${{ env.REGISTRY_URL }}/agricultural-system/ros2:${{ github.ref_name }}
          severity: ${{ env.TRIVY_SEVERITY }}
          format: 'sarif'
          output: 'trivy-ros2-results.sarif'

      # Build and scan TAO container
      - name: Build TAO Container
        uses: docker/build-push-action@v4
        with:
          context: ./infrastructure/docker/tao
          file: ./infrastructure/docker/tao/Dockerfile
          platforms: linux/arm64
          push: false
          tags: ${{ env.REGISTRY_URL }}/agricultural-system/tao:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan TAO Container
        uses: aquasecurity/trivy-action@0.10.0
        with:
          image: ${{ env.REGISTRY_URL }}/agricultural-system/tao:${{ github.ref_name }}
          severity: ${{ env.TRIVY_SEVERITY }}
          format: 'sarif'
          output: 'trivy-tao-results.sarif'

      # Push containers if all scans pass
      - name: Push Containers
        if: success()
        run: |
          docker push ${{ env.REGISTRY_URL }}/agricultural-system/deepstream:${{ github.ref_name }}
          docker push ${{ env.REGISTRY_URL }}/agricultural-system/ros2:${{ github.ref_name }}
          docker push ${{ env.REGISTRY_URL }}/agricultural-system/tao:${{ github.ref_name }}

      - name: Upload Scan Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: trivy-*-results.sarif

  # Deploy to edge environment
  deploy_edge:
    name: Deploy to Edge
    needs: build_containers
    runs-on: [self-hosted, arm64]
    environment: production
    concurrency: production_environment

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Kubernetes Config
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Validate Manifests
        run: |
          kubectl kustomize infrastructure/k8s/overlays/prod | \
          kubectl apply --dry-run=client -f -

      - name: Deploy to Edge
        run: |
          kubectl kustomize infrastructure/k8s/overlays/prod | \
          kubectl apply -f -

      - name: Verify Deployment
        run: |
          kubectl -n agricultural-system wait --for=condition=available \
            deployment/deepstream-processor \
            deployment/ros2-controller \
            deployment/tao-inference \
            --timeout=300s

      - name: Run Health Checks
        run: |
          for i in {1..30}; do
            if kubectl -n agricultural-system get pods -l app.kubernetes.io/name=deepstream-processor -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -q true && \
               kubectl -n agricultural-system get pods -l app.kubernetes.io/name=ros2-controller -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -q true && \
               kubectl -n agricultural-system get pods -l app.kubernetes.io/name=tao-inference -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -q true; then
              echo "All services are healthy"
              exit 0
            fi
            sleep 10
          done
          echo "Health check failed"
          exit 1

      - name: Notify Deployment Status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}';
            const message = status === 'success' 
              ? '✅ Edge deployment successful'
              : '❌ Edge deployment failed';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });